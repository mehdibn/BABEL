package tn.lipsic.babel.generator;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

/**
 * An expression that generates a random value in the specified range.
 */
public class UniformGenerator extends Generator<String> {
    private final List<String> values;
    private final UniformLongGenerator gen;
    private String laststring;

    /**
     * Creates a generator that will return strings from the specified set uniformly randomly.
     */
    public UniformGenerator(Collection<String> values) {
        this.values = new ArrayList<>(values);
        laststring = null;
        gen = new UniformLongGenerator(0, values.size() - 1);
    }

    /**
     * Generate the next string in the distribution.
     */
    @Override
    public String nextValue() {
        laststring = values.get(gen.nextValue().intValue());
        return laststring;
    }

    /**
     * Return the previous string generated by the distribution; e.g., returned from the last nextString() call.
     * Calling lastString() should not advance the distribution or have any side effects. If nextString() has not yet
     * been called, lastString() should return something reasonable.
     */
    @Override
    public String lastValue() {
        if (laststring == null) {
            nextValue();
        }
        return laststring;
    }
}

